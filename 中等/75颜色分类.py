"""

给定一个包含红色、白色和蓝色，一共n 个元素的数组，原地对它们进行排序，
使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

此题中，我们使用整数 0、1 和 2 分别表示红色、白色和蓝色。

示例 1：
输入：nums = [2,0,2,1,1,0]
输出：[0,0,1,1,2,2]

示例 2：
输入：nums = [2,0,1]
输出：[0,1,2]

示例 3：
输入：nums = [0]
输出：[0]

示例 4：
输入：nums = [1]
输出：[1]

"""


def sortColors(nums):
    # 投机取巧的方法。。。
    # nums.sort()
    # return nums

    # 该问题是荷兰旗问题
    # 荷兰国旗是由红白蓝3种颜色的条纹拼接而成
    # 假设这样的条纹有多条，且各种颜色的数量不一，并且随机组成了一个新的图形
    # 荷兰旗问题就是:把这些条纹按照颜色排好，红色的在上半部分，白色的在中间部分，蓝色的在下半部分
    # 双指针方法基本思路
    # 我们可以用指针p0来交换0，p2来交换2
    # p0的初始值为0，p2的初始值为n - 1
    # 在遍历过程中，我们需要找出所有的0交换至数组头部，找出所有的2交换至数组的尾部
    # 我们从右开始遍历整个数组，设当前遍历到的位置为i,对应的元素为nums[i]:
    #   1. 如果找到了0，将其与nums[p0]交换，并将p0向后移一个位置
    #   2. 如果找到了2，将其与nums[p2]交换，并将p2向前移一个位置
    # 如果nums[i] == 1,那么就不需要进行任何操作
    n = len(nums)
    p0, p2 = 0, n - 1
    i = 0
    while i <= p2:
        # 这里的while是判断被交换过来的num[p2]是否为2,如果为2,则还需要进行交换
        while i <= p2 and nums[i] == 2:
            nums[i], nums[p2] = nums[p2], nums[i]
            p2 -= 1
        if nums[i] == 0:
            nums[i], nums[p0] = nums[p0], nums[i]
            p0 += 1
        i += 1
    return nums


print(sortColors([2, 0, 2, 1, 1, 0]))
print(sortColors([2, 0, 1]))
print(sortColors([0]))
print(sortColors([1]))
