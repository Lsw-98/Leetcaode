"""

给你一个由'1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
此外，你可以假设该网格的四条边均被水包围。

示例 1：
输入：grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
输出：1

示例 2：
输入：grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
输出：3

"""


def numIslands(grid):

    n = len(grid)
    m = len(grid[0])
    count = 0

    def bfs(x, y):
        grid[x][y] = '2'
        if x - 1 >= 0:
            if grid[x - 1][y] == '1':
                bfs(x - 1, y)
        if x + 1 < n:
            if grid[x + 1][y] == '1':
                bfs(x + 1, y)
        if y - 1 >= 0:
            if grid[x][y - 1] == '1':
                bfs(x, y - 1)
        if y + 1 < m:
            if grid[x][y + 1] == '1':
                bfs(x, y + 1)

    for i in range(n):
        for j in range(m):
            if grid[i][j] == '1':
                bfs(i, j)
                count += 1
    return count


print(numIslands([["1", "1", "1", "1", "0"], ["1", "1", "0", "1", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "0", "0", "0"]]))
print(numIslands([["1", "1", "0", "0", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "1", "0", "0"], ["0", "0", "0", "1", "1"]]))
print(numIslands([["1", "1", "1"], ["0", "1", "0"], ["1", "1", "1"]]))
