# 现在有 10 ** 5 个用户，编号为 1 - 10 ** 5，
# 现在已知有 m 对关系，每一对关系给你两个数 x 和 y ，
# 代表编号为 x 的用户和编号为 y 的用户是在一个圈子中，
# 例如： A 和 B 在一个圈子中， B 和 C 在一个圈子中，那么 A , B , C 就在一个圈子中。
# 现在想知道最多的一个圈子内有多少个用户。

# 数据范围： 
# 进阶：空间复杂度O(n)，时间复杂度O(nlogn) 

# 输入描述:
# 第一行输入一个整数T，接下来有T组测试数据。
# 对于每一组测试数据：第一行输入1个整数n，代表有n对关系。
# 接下来n行，每一行输入两个数x和y，代表编号为x和编号为y的用户在同一个圈子里。
# 1 ≤ T ≤ 10
# 1 ≤ n ≤ 2*10 ** 6
# 1 ≤ x, y ≤ 10 ** 5

# 输出描述:
# 对于每组数据，输出一个答案代表一个圈子内的最多人数

# 输入例子1:
# 2
# 4
# 1 2
# 3 4
# 5 6
# 1 6
# 4
# 1 2
# 3 4
# 5 6
# 7 8

# 输出例子1:
# 4
# 2


t = int(input())
for _ in range(t):
  n = int(input())
  friends = list()
  temp = list(map(int, input().split()))

  
