"""

一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，
因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

示例 1：
输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。

示例 2：
输入： [2,7,9,3,1]
输出： 12
解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。

示例 3：
输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。

"""


def massage(nums):
    if len(nums) == 0:
        return 0
    dp = [[0] * 2 for _ in range(len(nums))]
    dp[0][0] = 0
    dp[0][1] = nums[0]
    #  dp[i][0] 表示考虑前 i 个预约，第 i 个预约不接的最长预约时间，dp[i][1] 表示考虑前 i 个预约，第 i 个预约接的最长预约时间。
    for i in range(1, len(nums)):
        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])
        dp[i][1] = nums[i] + dp[i - 1][0]
    return max(dp[-1][0], dp[-1][1])


print(massage([2, 1, 1, 2]))
print(massage([1, 2, 1, 1, 100, 10]))
print(massage([1, 2, 3, 1]))
print(massage([2, 7, 9, 3, 1]))
print(massage([2, 1, 4, 5, 3, 1, 1, 3]))
